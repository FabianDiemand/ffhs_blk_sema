{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "enum SolarInsurance.ClientRiskLevels",
						"name": "riskLevel",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "panelArea",
						"type": "uint256"
					}
				],
				"name": "calculatePremium",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "year",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "duration",
						"type": "uint256"
					},
					{
						"internalType": "enum SolarInsurance.SwissRegion",
						"name": "region",
						"type": "uint8"
					}
				],
				"name": "createSunshineRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "extendPolicy",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "year",
						"type": "uint256"
					}
				],
				"name": "fileClaim",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "year",
						"type": "uint256"
					}
				],
				"name": "fileClaimWithoutChecks",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "fundContract",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPolicyInformation",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "client",
								"type": "address"
							},
							{
								"internalType": "enum SolarInsurance.SwissRegion",
								"name": "panelLocation",
								"type": "uint8"
							},
							{
								"internalType": "enum SolarInsurance.ClientRiskLevels",
								"name": "riskLevel",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "panelArea",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "premiumToPay",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "registrationDate",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "validUntil",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "claimTimeout",
								"type": "uint256"
							}
						],
						"internalType": "struct SolarInsurance.SolarInsurancePolicy",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum SolarInsurance.ClientRiskLevels",
						"name": "riskLevel",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "panelArea",
						"type": "uint256"
					},
					{
						"internalType": "enum SolarInsurance.SwissRegion",
						"name": "location",
						"type": "uint8"
					}
				],
				"name": "registerPolicy",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Fabian Diemand",
			"custom:educational": "This contract is intended only as an educational piece of work. No productive use is intended.",
			"kind": "dev",
			"methods": {
				"calculatePremium(uint8,uint256)": {
					"params": {
						"panelArea": "The area of the solar panel (in square meters).",
						"riskLevel": "The risk level of the client (HIGH, MID, LOW)."
					},
					"returns": {
						"_0": "The calculated premium in wei."
					}
				},
				"extendPolicy()": {
					"details": "The policy will be extended for another year from the current validUntil timestamp.Requirements:- The client must be insured.- The policy must still be active.- The premium must be covered by the amount of wei sent with the message."
				},
				"fileClaim(uint256)": {
					"details": "Requirements:- The client must be insured.- There must be no timeout for client's claims.- The specified year must be claimable by the client.- There must be a recorded sunshine duration for the specified year and region.",
					"params": {
						"year": "The year for which the claim is filed."
					}
				},
				"getPolicyInformation()": {
					"details": "Requirements:- The sender must be insured.",
					"returns": {
						"_0": "The SolarInsurancePolicy with the data from the client's policy "
					}
				},
				"owner()": {
					"returns": {
						"_0": "The address of the contract owner."
					}
				}
			},
			"title": "An insurance for solar power",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"calculatePremium(uint8,uint256)": {
					"notice": "Calculate the required premium for a Solar Insurance Policy."
				},
				"extendPolicy()": {
					"notice": "Extend an existing Solar Insurance Policy by a year"
				},
				"fileClaim(uint256)": {
					"notice": "Allows the client to file a claim for insurance for a specific year."
				},
				"getPolicyInformation()": {
					"notice": "Get details of own policy "
				},
				"owner()": {
					"notice": "Get owner's address"
				}
			},
			"notice": "The contract is intended to cover damages in form of additional costs resulting from having to consume power from the mainnet.Such damages can result from a lack of sunshine, which limits the power output of photovoltaic panels.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/SolarInsurance.sol": "SolarInsurance"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453",
				"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
				"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a",
			"license": "MIT",
			"urls": [
				"bzz-raw://ef8e012e946dec20e59f2d4446f4b44bb098f3fa8bac103b1b5112fff777447b",
				"dweb:/ipfs/QmVTooKWcLkJ9W68yNX4MgdrbAKiAXwuRN9A7f4NkdcdtQ"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc",
				"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT"
			]
		},
		"contracts/SolarInsurance.sol": {
			"keccak256": "0xb4df47137cfc3a024be348faba37c7760ea56a89070d56494ae008cb95a1ec5e",
			"license": "MIT",
			"urls": [
				"bzz-raw://9d3e445be186d408234b47cfced43aa46fc23f6237c78ad22ec5e6e03e26ee94",
				"dweb:/ipfs/QmPBKupHqK7Y2BQtXmKPDgmXQVnD1kccc2jjBnpgTKj8h4"
			]
		},
		"libraries/Fundable.sol": {
			"keccak256": "0x96e2d606b140477909443ea5860dfcd85bec648108c45e08d8fc48676a10574f",
			"license": "MIT",
			"urls": [
				"bzz-raw://6900e56d50b00348b2c851248884c27d09e6e6d18e15b84285b59db71bfb57b5",
				"dweb:/ipfs/QmQULAtsoF5jsvw4iRMMfVFpGKjug78yZX6xRe3LkX985N"
			]
		},
		"libraries/Utils.sol": {
			"keccak256": "0x8ebe433afb49d89781b3c552014bcc90f5097abfdbfdaa8615ac5337921e8a0c",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ce56b3a63bcf888ae437bee09fc933cb08347a6e0637f7389ddb0afee631586",
				"dweb:/ipfs/QmUFn8RDQMZ3yfVLyp1stw8mAquzmpbSnP3vEJrBKwYa3t"
			]
		}
	},
	"version": 1
}