{
	"id": "bc991ddfaea8dda73af480e4ee0c7084",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.22",
	"solcLongVersion": "0.8.22+commit.4fc1097e",
	"input": {
		"language": "Solidity",
		"sources": {
			"libraries/Fundable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.22;\r\n\r\n/**\r\n* @title An abstract contract for contract funding\r\n* @author Fabian Diemand\r\n*\r\n* @notice The abstract contract is intended to fund other contracts (e.g. for demo purposes).\r\n*\r\n* @custom:educational This contract is intended only as an educational piece of work. No productive use is intended.\r\n*/\r\nabstract contract Fundable{\r\n\r\n    constructor() {}\r\n\r\n    /*\r\n    * @notice Load contract with some eth to be able to payout claims.\r\n    * @param _value The amount of eth to be loaded into the contract.\r\n    * @dev This function is used to fund the contract with some ether for demonstration purposes.\r\n    * @dev It requires the caller to provide a non-zero amount of ether as the `_value` parameter.\r\n    * @dev If the `_value` is provided as zero, the function will revert the transaction.\r\n    */\r\n    function fundContract() public payable requireNonZeroValue {\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to require value of a message being positive (DRY)\r\n     * \r\n     * @dev Requirements:\r\n     * @dev - The value sent with the message must be greater than zero\r\n     */\r\n    modifier requireNonZeroValue {\r\n        require(msg.value > 0, \"Cannot load the contract with 0\");\r\n        _;\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"libraries/Fundable.sol": {
				"Fundable": {
					"abi": [
						{
							"inputs": [],
							"name": "fundContract",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Fabian Diemand",
						"custom:educational": "This contract is intended only as an educational piece of work. No productive use is intended.",
						"kind": "dev",
						"methods": {},
						"title": "An abstract contract for contract funding",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"fundContract()": "bd097e21"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Fabian Diemand\",\"custom:educational\":\"This contract is intended only as an educational piece of work. No productive use is intended.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"An abstract contract for contract funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The abstract contract is intended to fund other contracts (e.g. for demo purposes).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/Fundable.sol\":\"Fundable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"libraries/Fundable.sol\":{\"keccak256\":\"0x96e2d606b140477909443ea5860dfcd85bec648108c45e08d8fc48676a10574f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6900e56d50b00348b2c851248884c27d09e6e6d18e15b84285b59db71bfb57b5\",\"dweb:/ipfs/QmQULAtsoF5jsvw4iRMMfVFpGKjug78yZX6xRe3LkX985N\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "The abstract contract is intended to fund other contracts (e.g. for demo purposes).",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"libraries/Fundable.sol": {
				"ast": {
					"absolutePath": "libraries/Fundable.sol",
					"exportedSymbols": {
						"Fundable": [
							26
						]
					},
					"id": 27,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".22"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Fundable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "60:304:0",
								"text": " @title An abstract contract for contract funding\n @author Fabian Diemand\n @notice The abstract contract is intended to fund other contracts (e.g. for demo purposes).\n @custom:educational This contract is intended only as an educational piece of work. No productive use is intended."
							},
							"fullyImplemented": true,
							"id": 26,
							"linearizedBaseContracts": [
								26
							],
							"name": "Fundable",
							"nameLocation": "384:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 5,
										"nodeType": "Block",
										"src": "415:2:0",
										"statements": []
									},
									"id": 6,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "412:2:0"
									},
									"returnParameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "415:0:0"
									},
									"scope": 26,
									"src": "401:16:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 11,
										"nodeType": "Block",
										"src": "933:8:0",
										"statements": []
									},
									"functionSelector": "bd097e21",
									"id": 12,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 9,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 8,
												"name": "requireNonZeroValue",
												"nameLocations": [
													"913:19:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 25,
												"src": "913:19:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "913:19:0"
										}
									],
									"name": "fundContract",
									"nameLocation": "883:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "895:2:0"
									},
									"returnParameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "933:0:0"
									},
									"scope": 26,
									"src": "874:67:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 24,
										"nodeType": "Block",
										"src": "1178:88:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 16,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1197:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 17,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1201:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "1197:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 18,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1209:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1197:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f74206c6f61642074686520636f6e747261637420776974682030",
															"id": 20,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1212:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a059d4a8f9259292aa96fea42b383ca7b72df04a4cd33736b75d63ed753a2c7",
																"typeString": "literal_string \"Cannot load the contract with 0\""
															},
															"value": "Cannot load the contract with 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a059d4a8f9259292aa96fea42b383ca7b72df04a4cd33736b75d63ed753a2c7",
																"typeString": "literal_string \"Cannot load the contract with 0\""
															}
														],
														"id": 15,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1189:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 21,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1189:57:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 22,
												"nodeType": "ExpressionStatement",
												"src": "1189:57:0"
											},
											{
												"id": 23,
												"nodeType": "PlaceholderStatement",
												"src": "1257:1:0"
											}
										]
									},
									"documentation": {
										"id": 13,
										"nodeType": "StructuredDocumentation",
										"src": "949:194:0",
										"text": " @dev Modifier to require value of a message being positive (DRY)\n \n @dev Requirements:\n @dev - The value sent with the message must be greater than zero"
									},
									"id": 25,
									"name": "requireNonZeroValue",
									"nameLocation": "1158:19:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1178:0:0"
									},
									"src": "1149:117:0",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 27,
							"src": "366:903:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:1236:0"
				},
				"id": 0
			}
		}
	}
}